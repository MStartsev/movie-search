{"version":3,"file":"static/js/168.30c418fd.chunk.js","mappings":"qMACA,EAAuB,sBAAvB,EAAqD,uBAArD,EAAmF,sB,SCKpE,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IAEXE,EAAAA,EAAAA,IAAWR,GACRS,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBN,EAAWM,EAA5B,IACLC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sBAAuBF,EAAMG,QAA7C,IACXC,QAAQV,GAAW,GACvB,GAAE,CAACN,KAGF,8BACGK,GACC,iDAEA,8BACGF,EAAQc,QACP,eAAIC,UAAWC,EAAf,SACGhB,EAAQiB,KAAI,SAAAC,GAAM,OACjB,2BACE,eAAIH,UAAWC,EAAf,SAA2BE,EAAOC,UAClC,uBAAID,EAAOE,YAFJF,EAAOG,GADC,OAQrB,cAAGN,UAAWC,EAAd,yDAMX,C,+LCtCDM,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,oCAOhB,IAAMC,EAAU,mCAAG,WAAOC,EAAKC,GAAZ,gGAEQJ,EAAAA,EAAAA,IAAUG,EAAKC,GAFvB,WAETC,EAFS,QAIDD,KAJC,sBAIW,IAAIE,MAAMD,EAASE,YAJ9B,gCAKRF,EAASD,MALD,gCAOfhB,QAAQC,IAAR,sCAA2Cc,EAA3C,aAAmD,KAAMb,UAP1C,yDAAH,wDAWHkB,EAAW,mCAAG,8FAAkBN,EAAW,uBAA7B,mFAAH,qDAEXO,EAAU,mCAAG,WAAMC,GAAN,iFAClBR,EAAW,UAAD,OAAWQ,IADH,mFAAH,sDAGVC,EAAU,mCAAG,WAAMD,GAAN,iFAClBR,EAAW,UAAD,OAAWQ,EAAX,aADQ,mFAAH,sDAGV3B,EAAU,mCAAG,WAAM2B,GAAN,iFAClBR,EAAW,UAAD,OAAWQ,EAAX,aADQ,mFAAH,sDAGVE,EAAgB,mCAAG,WAAMC,GAAN,iFACxBX,EAAW,gBAAiB,CAChCY,OAAQ,CACND,MAAAA,KAH0B,mFAAH,qD","sources":["webpack://movie-search/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","servises/tmdb-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__okdpy\",\"title\":\"Reviews_title__t265C\",\"text\":\"Reviews_text__EqLvx\"};","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'servises/tmdb-api';\nimport css from './Reviews.module.css';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getReviews(movieId)\n      .then(({ results }) => setReviews(results))\n      .catch(error => console.log('Error fetching cast', error.message))\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading reviews...</div>\n      ) : (\n        <>\n          {reviews.length ? (\n            <ul className={css.list}>\n              {reviews.map(review => (\n                <li key={review.id}>\n                  <h2 className={css.title}>{review.author}</h2>\n                  <p>{review.content}</p>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className={css.text}>We don't have any reviews for this movie</p>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '1f2e1346f84e3b2d486a79ce9b661dcb';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst getApiData = async (url, data) => {\n  try {\n    const response = await axios.get(url, data);\n\n    if (!response.data) throw new Error(response.statusText);\n    return response.data;\n  } catch (error) {\n    console.log(`Error making GET request to ${url}: ${error.message}`);\n  }\n};\n\nexport const getTrending = async () => await getApiData('/trending/movie/day');\n\nexport const getDetails = async movie_id =>\n  await getApiData(`/movie/${movie_id}`);\n\nexport const getCredits = async movie_id =>\n  await getApiData(`/movie/${movie_id}/credits`);\n\nexport const getReviews = async movie_id =>\n  await getApiData(`/movie/${movie_id}/reviews`);\n\nexport const getSearchByQuery = async query =>\n  await getApiData(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","isLoading","setLoading","useEffect","getReviews","then","results","catch","error","console","log","message","finally","length","className","css","map","review","author","content","id","axios","api_key","getApiData","url","data","response","Error","statusText","getTrending","getDetails","movie_id","getCredits","getSearchByQuery","query","params"],"sourceRoot":""}